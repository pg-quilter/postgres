---
--- test creation of SERIAL column
---
CREATE TABLE serialTest (f1 text, f2 serial);
INSERT INTO serialTest VALUES ('foo');
INSERT INTO serialTest VALUES ('bar');
INSERT INTO serialTest VALUES ('force', 100);
INSERT INTO serialTest VALUES ('wrong', NULL);
ERROR:  null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
(3 rows)

-- test smallserial / bigserial
CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
  f5 bigserial, f6 serial8);
INSERT INTO serialTest2 (f1)
  VALUES ('test_defaults');
INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
  VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
          9223372036854775807),
         ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
          -9223372036854775808);
-- All these INSERTs should fail:
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
SELECT * FROM serialTest2 ORDER BY f2 ASC;
      f1       |     f2      |   f3   |   f4   |          f5          |          f6          
---------------+-------------+--------+--------+----------------------+----------------------
 test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
 test_defaults |           1 |      1 |      1 |                    1 |                    1
 test_max_vals |  2147483647 |  32767 |  32767 |  9223372036854775807 |  9223372036854775807
(3 rows)

SELECT nextval('serialTest2_f2_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f3_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f4_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f5_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f6_seq');
 nextval 
---------
       2
(1 row)

-- basic sequence operations using both text and oid references
CREATE SEQUENCE sequence_test;
SELECT nextval('sequence_test'::text);
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
       2
(1 row)

SELECT currval('sequence_test'::text);
 currval 
---------
       2
(1 row)

SELECT currval('sequence_test'::regclass);
 currval 
---------
       2
(1 row)

SELECT setval('sequence_test'::text, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::text, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      99
(1 row)

SELECT setval('sequence_test'::regclass, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::regclass, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      99
(1 row)

DROP SEQUENCE sequence_test;
-- renaming sequences
CREATE SEQUENCE foo_seq;
ALTER TABLE foo_seq RENAME TO foo_seq_new;
SELECT * FROM foo_seq_new;
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called 
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------
 foo_seq       |          1 |           1 |            1 | 9223372036854775807 |         1 |           1 |       0 | f         | f
(1 row)

SELECT nextval('foo_seq_new');
 nextval 
---------
       1
(1 row)

SELECT nextval('foo_seq_new');
 nextval 
---------
       2
(1 row)

SELECT * FROM foo_seq_new;
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called 
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------
 foo_seq       |          2 |           1 |            1 | 9223372036854775807 |         1 |           1 |      31 | f         | t
(1 row)

DROP SEQUENCE foo_seq_new;
-- renaming serial sequences
ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
INSERT INTO serialTest VALUES ('more');
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
 more  |   3
(4 rows)

--
-- Check dependencies of serial and ordinary sequences
--
CREATE TEMP SEQUENCE myseq2;
CREATE TEMP SEQUENCE myseq3;
CREATE TEMP TABLE t1 (
  f1 serial,
  f2 int DEFAULT nextval('myseq2'),
  f3 int DEFAULT nextval('myseq3'::text)
);
-- Both drops should fail, but with different error messages:
DROP SEQUENCE t1_f1_seq;
ERROR:  cannot drop sequence t1_f1_seq because other objects depend on it
DETAIL:  default for table t1 column f1 depends on sequence t1_f1_seq
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP SEQUENCE myseq2;
ERROR:  cannot drop sequence myseq2 because other objects depend on it
DETAIL:  default for table t1 column f2 depends on sequence myseq2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- This however will work:
DROP SEQUENCE myseq3;
DROP TABLE t1;
-- Fails because no longer existent:
DROP SEQUENCE t1_f1_seq;
ERROR:  sequence "t1_f1_seq" does not exist
-- Now OK:
DROP SEQUENCE myseq2;
--
-- Alter sequence
--
ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
NOTICE:  relation "sequence_test2" does not exist, skipping
CREATE SEQUENCE sequence_test2 START WITH 32;
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

ALTER SEQUENCE sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
SELECT nextval('sequence_test2');
 nextval 
---------
      24
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      28
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
       5
(1 row)

ALTER SEQUENCE sequence_test2 RESTART;
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
       5
(1 row)

-- Information schema
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 regression       | public          | sequence_test2     | bigint    |                64 |                       2 |             0 | 32          | 5             | 36                  | 4         | YES
 regression       | public          | serialtest2_f2_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f3_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f4_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f5_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f6_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
(6 rows)

-- Test comments
COMMENT ON SEQUENCE asdf IS 'won''t work';
ERROR:  relation "asdf" does not exist
COMMENT ON SEQUENCE sequence_test2 IS 'will work';
COMMENT ON SEQUENCE sequence_test2 IS NULL;
-- Test lastval()
CREATE SEQUENCE seq;
SELECT nextval('seq');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

SELECT setval('seq', 99);
 setval 
--------
     99
(1 row)

SELECT lastval();
 lastval 
---------
      99
(1 row)

CREATE SEQUENCE seq2;
SELECT nextval('seq2');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

DROP SEQUENCE seq2;
-- should fail
SELECT lastval();
ERROR:  lastval is not yet defined in this session
CREATE USER seq_user;
BEGIN;
SET LOCAL SESSION AUTHORIZATION seq_user;
CREATE SEQUENCE seq3;
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
SELECT lastval();
ERROR:  permission denied for sequence seq3
ROLLBACK;
-- Sequences should get wiped out as well:
DROP TABLE serialTest, serialTest2;
-- Make sure sequences are gone:
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema | sequence_name  | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value | maximum_value | increment | cycle_option 
------------------+-----------------+----------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------+-----------+--------------
 regression       | public          | sequence_test2 | bigint    |                64 |                       2 |             0 | 32          | 5             | 36            | 4         | YES
(1 row)

DROP USER seq_user;
DROP SEQUENCE seq;
-- Test SEQUENCE tied to a field
CREATE TABLE tbl_seq1 (f1 bigint, f2 bigint);
CREATE SEQUENCE seq4 OWNED BY tbl_seq1.f1;
ALTER TABLE tbl_seq1 DROP COLUMN f1;
DROP TABLE tbl_seq1;
-- Should fail since seq5 shouldn't exist
DROP SEQUENCE seq5;
ERROR:  sequence "seq5" does not exist
-- Should fail, unlogged sequences are currently not supported
CREATE TABLE tbl_seq2 (f1 bigint, f2 bigint);
CREATE UNLOGGED SEQUENCE seq6 OWNED BY tbl_seq2.f1;
ERROR:  unlogged sequences are not supported
DROP TABLE tbl_seq2;
-- non-OWNER should not be allowed to access SEQUENCE
CREATE SEQUENCE seq7;
SELECT nextval('seq7');
 nextval 
---------
       1
(1 row)

CREATE ROLE regress_role_seq1;
SET ROLE regress_role_seq1;
SELECT nextval('seq7');
ERROR:  permission denied for sequence seq7
SELECT currval('seq7');
ERROR:  permission denied for sequence seq7
SELECT setval('seq7', 10);
ERROR:  permission denied for sequence seq7
ALTER SEQUENCE seq7 OWNED BY NONE;
ERROR:  must be owner of relation seq7
SELECT * FROM seq7;
ERROR:  permission denied for relation seq7
RESET ROLE;
DROP ROLE regress_role_seq1;
DROP SEQUENCE seq7;
-- non-OWNER when allowed to create SEQUENCE on table, should by OWNED by tbl owner
CREATE USER regress_role_seq2;
SET ROLE regress_role_seq2;
CREATE TABLE tbl_seq2 (f1 bigint);
RESET ROLE;
ALTER TABLE tbl_seq2 ADD COLUMN f2 bigserial;
SET ROLE regress_role_seq2;
DROP TABLE tbl_seq2;
RESET ROLE;
DROP ROLE regress_role_seq2;
-- Should fail, Currval not yet defined in session
CREATE SEQUENCE seq8;
SELECT currval('seq8');
ERROR:  currval of sequence "seq8" is not yet defined in this session
DROP SEQUENCE seq8;
-- Setval should work with valid values
CREATE SEQUENCE seq9;
SELECT setval('seq9', 10);
 setval 
--------
     10
(1 row)

SELECT setval('seq9', 20, true);
 setval 
--------
     20
(1 row)

SELECT setval('seq9', 30, false);
 setval 
--------
     30
(1 row)

DROP SEQUENCE seq9;
-- Should fail, setval beyond limits
CREATE SEQUENCE seq10 MINVALUE 20 MAXVALUE 30;
SELECT setval('seq10', 31);
ERROR:  setval: value 31 is out of bounds for sequence "seq10" (20..30)
SELECT setval('seq10', 19);
ERROR:  setval: value 19 is out of bounds for sequence "seq10" (20..30)
DROP SEQUENCE seq10;
-- Should fail, trying a SEQUENCE function on a valid but non-SEQUENCE object
CREATE TABLE tbl_seq3 (f1 bigint);
SELECT nextval('tbl_seq3');
ERROR:  "tbl_seq3" is not a sequence
DROP TABLE tbl_seq3;
-- Should fail, crosscheck min/max
CREATE SEQUENCE seq11 MINVALUE 40 MAXVALUE 30;
ERROR:  MINVALUE (40) must be less than MAXVALUE (30)
CREATE SEQUENCE seq11 MINVALUE 20 MAXVALUE 20;
ERROR:  MINVALUE (20) must be less than MAXVALUE (20)
CREATE SEQUENCE seq11 MINVALUE 40 MAXVALUE 20 INCREMENT BY -1;
ERROR:  MINVALUE (40) must be less than MAXVALUE (20)
-- Should fail, crosscheck START with min/max
CREATE SEQUENCE seq12 START 29 MINVALUE 30 MAXVALUE 40;
ERROR:  START value (29) cannot be less than MINVALUE (30)
CREATE SEQUENCE seq12 START -41 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
ERROR:  START value (-41) cannot be less than MINVALUE (-40)
CREATE SEQUENCE seq12 START 41 MINVALUE 30 MAXVALUE 40;
ERROR:  START value (41) cannot be greater than MAXVALUE (40)
CREATE SEQUENCE seq12 START -29 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
ERROR:  START value (-29) cannot be greater than MAXVALUE (-30)
-- Should work, ensure valid START works with valid min/max
CREATE SEQUENCE seq13 START 35 MINVALUE 30 MAXVALUE 40;
DROP SEQUENCE seq13;
CREATE SEQUENCE seq13 START -35 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
DROP SEQUENCE seq13;
-- Should fail, crosscheck RESTART with min/max
CREATE SEQUENCE seq14 RESTART 29 MINVALUE 30 MAXVALUE 40;
ERROR:  RESTART value (29) cannot be less than MINVALUE (30)
CREATE SEQUENCE seq14 RESTART -41 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
ERROR:  RESTART value (-41) cannot be less than MINVALUE (-40)
CREATE SEQUENCE seq14 RESTART 41 MINVALUE 30 MAXVALUE 40;
ERROR:  RESTART value (41) cannot be greater than MAXVALUE (40)
CREATE SEQUENCE seq14 RESTART -29 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
ERROR:  RESTART value (-29) cannot be greater than MAXVALUE (-30)
-- Should work, ensure valid RESTART works with valid min/max
CREATE SEQUENCE seq15 RESTART 35 MINVALUE 30 MAXVALUE 40;
DROP SEQUENCE seq15;
CREATE SEQUENCE seq15 RESTART -35 MINVALUE -40 MAXVALUE -30 INCREMENT BY -1;
DROP SEQUENCE seq15;
-- Should fail, Invalid OWNED BY option
CREATE TABLE tbl_seq4 (f1 bigint);
CREATE SEQUENCE seq16 OWNED BY asdf;
ERROR:  invalid OWNED BY option
HINT:  Specify OWNED BY table.column or OWNED BY NONE.
CREATE SEQUENCE seq16 OWNED BY tbl_seq4;
ERROR:  invalid OWNED BY option
HINT:  Specify OWNED BY table.column or OWNED BY NONE.
CREATE SEQUENCE seq16 OWNED BY tbl_seq4.asdf;
ERROR:  column "asdf" of relation "tbl_seq4" does not exist
CREATE SEQUENCE seq16;
CREATE SEQUENCE seq17 OWNED BY seq16.asdf;
ERROR:  referenced relation "seq16" is not a table or foreign table
DROP SEQUENCE seq16;
DROP TABLE tbl_seq4;
-- Should fail, ensure table / sequence have same owner
CREATE TABLE tbl_seq5 (f1 bigint);
CREATE USER regress_role_seq3;
SET ROLE regress_role_seq3;
CREATE SEQUENCE seq18;
ALTER SEQUENCE seq18 OWNED BY tbl_seq5.f1;
ERROR:  sequence must have same owner as table it is linked to
DROP SEQUENCE seq18;
RESET ROLE;
DROP ROLE regress_role_seq3;
DROP TABLE tbl_seq5;
-- Should fail, ensure table / sequence have same schema
CREATE TABLE tbl_seq6 (f1 bigint);
CREATE SCHEMA schema_seq1;
CREATE SEQUENCE schema_seq1.seq5;
ALTER SEQUENCE schema_seq1.seq5 OWNED BY tbl_seq6.f1;
ERROR:  sequence must be in same schema as table it is linked to
DROP SEQUENCE schema_seq1.seq5;
DROP SCHEMA schema_seq1;
DROP TABLE tbl_seq6;
-- Should fail, INCREMENT BY cannot be 0
CREATE SEQUENCE seq19 INCREMENT BY 0;
ERROR:  INCREMENT must not be zero
-- Check MAXVALUE in ALTER SEQUENCE
CREATE SEQUENCE seq20 MINVALUE 1 MAXVALUE 2;
ALTER SEQUENCE seq20 MINVALUE 0;
SELECT nextval('seq20');
 nextval 
---------
       1
(1 row)

SELECT nextval('seq20');
 nextval 
---------
       2
(1 row)

SELECT nextval('seq20');
ERROR:  nextval: reached maximum value of sequence "seq20" (2)
ALTER SEQUENCE seq20 MAXVALUE 3;
SELECT nextval('seq20');
 nextval 
---------
       3
(1 row)

DROP SEQUENCE seq20;
-- Check MINVALUE in ALTER SEQUENCE
CREATE SEQUENCE seq21 MINVALUE 1 MAXVALUE 2 INCREMENT -1;
SELECT nextval('seq21');
 nextval 
---------
       2
(1 row)

SELECT nextval('seq21');
 nextval 
---------
       1
(1 row)

SELECT nextval('seq21');
ERROR:  nextval: reached minimum value of sequence "seq21" (1)
ALTER SEQUENCE seq21 MINVALUE 0;
SELECT nextval('seq21');
 nextval 
---------
       0
(1 row)

DROP SEQUENCE seq21;
-- Should fail, Should not allow conflicting / Redundant options
CREATE SEQUENCE seq22;
ALTER SEQUENCE seq22 MAXVALUE 100 NO MAXVALUE;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 MINVALUE 100 NO MINVALUE;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 INCREMENT BY 1 INCREMENT BY -1;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 START 1 START 2;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 RESTART 1 RESTART 2;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 CACHE 1 CACHE 2;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 CYCLE NO CYCLE;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 OWNED BY NONE OWNED BY regression;
ERROR:  conflicting or redundant options
ALTER SEQUENCE seq22 asdf;
ERROR:  syntax error at or near "asdf"
LINE 1: ALTER SEQUENCE seq22 asdf;
                             ^
DROP SEQUENCE seq22;
-- Check NO MINVALUE starts with 1
CREATE SEQUENCE seq23 NO MINVALUE;
ALTER SEQUENCE seq23 MINVALUE 1;
SELECT nextval('seq23');
 nextval 
---------
       1
(1 row)

DROP SEQUENCE seq23;
-- Should work. Check that OWNED BY works as expected
CREATE TABLE tbl_seq7 (f1 bigint);
CREATE SEQUENCE seq24 OWNED BY tbl_seq7.f2;
ERROR:  column "f2" of relation "tbl_seq7" does not exist
CREATE SEQUENCE seq24 OWNED BY tbl_seq7.f1;
ALTER SEQUENCE seq24 OWNED BY NONE;
DROP TABLE tbl_seq7;
DROP SEQUENCE seq24;
-- Should fail, Invalid CACHE value
CREATE SEQUENCE seq25 CACHE 0;
ERROR:  CACHE (0) must be greater than zero
-- Ensure correct MAXVALUE for descending sequence. Also check valid CACHE value
CREATE SEQUENCE seq27 INCREMENT -1 MAXVALUE -2 CACHE 2;
SELECT nextval('seq27');
 nextval 
---------
      -2
(1 row)

SELECT nextval('seq27');
 nextval 
---------
      -3
(1 row)

DROP SEQUENCE seq27;
-- Should stop incr when INCREMENT 1, CACHE > 1, MAXVALUE < 0, near MAXVALUE
CREATE SEQUENCE seq28 INCREMENT 1 CACHE 3 MINVALUE -2 MAXVALUE -1;
SELECT nextval('seq28');
 nextval 
---------
      -2
(1 row)

SELECT nextval('seq28');
 nextval 
---------
      -1
(1 row)

SELECT nextval('seq28');
ERROR:  nextval: reached maximum value of sequence "seq28" (-1)
DROP SEQUENCE seq28;
-- Should stop decr when INCREMENT -1, CACHE > 1, MINVALUE > 0, near MINVALUE
CREATE SEQUENCE seq29 INCREMENT -1 CACHE 3 MINVALUE 1 MAXVALUE 2;
SELECT nextval('seq29');
 nextval 
---------
       2
(1 row)

SELECT nextval('seq29');
 nextval 
---------
       1
(1 row)

SELECT nextval('seq29');
ERROR:  nextval: reached minimum value of sequence "seq29" (1)
DROP SEQUENCE seq29;
-- Should cycle when CYCLE is SET
CREATE SEQUENCE seq30 CYCLE INCREMENT -1 MINVALUE 1 MAXVALUE 2;
SELECT nextval('seq30');
 nextval 
---------
       2
(1 row)

SELECT nextval('seq30');
 nextval 
---------
       1
(1 row)

SELECT nextval('seq30');
 nextval 
---------
       2
(1 row)

DROP SEQUENCE seq30;
